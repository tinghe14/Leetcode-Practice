# 分治

# 什么时候 适合分治： 凡事符合分解成小问题的都适合分治 如果很模版就dfs 否则用分治 否则模版改动较大

## 分治的解题步骤
# 1.想下你的神奇函数 要返回什么东西 （一般来说就是直接返回结果）
# 2.想递推公式 （这个函数肯定算不出来 只是定义出来 如果你知道小问题的答案可不可以知道他的答案）如果你发现你的递推公式有一些你不知道的东西 那么就返回第一步 可以考虑让神奇函数 也返回这个东西 
# 是用另外一个单独的算法算出来 写在纸上想一想 递推公式 不用管他具体怎么出来的 但是递推公式一定要对 才能有结果
# 3.你有了递推公式 考虑base case 分到不能再分的时候 他的解的是什么 （写代码时会放在前面） 


# 什么时候适合dfs （search遍历）:dfs也是分治 但是属于search算法 一般就是遍历一次 然后找符合条件的解 否则需要改dfs的步骤 会使得模版改动较大 就更适合分治法

## dfs模版就是backtracking的模型
# 1. 搜索当前的状态：有cur节点 和一些辅助参数，首先判断是否符合条件 符合条件记录下来 
# 2. 再往其他方向搜索

# 什么时候更适合bfs： 一般图算法更适合 遍历一个图 找到一些东西 也是个search 以及toplogucal sort也是bfs的变形 不会有递归深度爆栈的问题

#[98 Validate Binary Search Tree](https://leetcode.com/problems/validate-binary-search-tree/)
# good example for divide and conquer instead of dfs