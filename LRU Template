# 餐馆题变种 O(1)实现 join(name), serve(), remove(name)
# Init写在括号里的参数 描述中出现的 必须有的参数 其他可能需要的 可以提供帮助的 不写在括号里 写在函数内部
# 后面也可以操作
class Restaurant:
    # hashmap: key: id, value: node (因为可以访问那个node 不需要知道在哪)
    # doubly link list: id 
    def __init__(self): #head, tail不能输入实现的细节 因为他们不知道这些东西
        # key: cur id, value:前一个人的id
        self.prev = {}
        # key: cur id value:后一个人的id 
        self.next = {}
        # auxilary head and tail
        self.connect("HEAD", "TAIL") #不需要做额外判断
    
    def connect(self, x, y):
        self.prev[y] = x
        self.next[x] = y

    def join(self, id):
        self.connect(self.prev["TAIL"], id)
        self.connect(id, "TAIL")
    
    def serve(self):
        if self.next["HEAD"] == "TAIL":
            return None
        cur = self.next["HEAD"]
        self.connect(self.prev[cur], self.next[cur])
        self.prev.pop(cur)
        self.next.pop(cur)
        return cur

    def remove(self, id):
        if id not in self.prev:
            return False 
        self.connect(self.prev[id], self.next[id])
        self.prev.pop(id)
        self.next.pop(id)
        return True 


# doubly link list (dummy left and right pointers tell you the least frequent used and mode frquent used)+ hash map
# hash map(key: value, value: location of node)
class Node:
    def __init__(self, key, val):
        self.key, self.val = key, val
        self.prev = self.next = None


class LRUCache:
    def __init__(self, capacity: int):
        self.cap = capacity
        self.cache = {}  # map key to node

        self.left, self.right = Node(0, 0), Node(0, 0)
        self.left.next, self.right.prev = self.right, self.left

    # remove node from list
    def remove(self, node):
        prev, nxt = node.prev, node.next
        prev.next, nxt.prev = nxt, prev

    # insert node at right
    def insert(self, node):
        prev, nxt = self.right.prev, self.right
        prev.next = nxt.prev = node
        node.next, node.prev = nxt, prev

    def get(self, key: int) -> int:
        if key in self.cache:
            self.remove(self.cache[key])
            self.insert(self.cache[key])S
            return self.cache[key].val
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.remove(self.cache[key])
        self.cache[key] = Node(key, value)
        self.insert(self.cache[key])

        if len(self.cache) > self.cap:
            # remove from the list and delete the LRU from hashmap
            lru = self.left.next
            self.remove(lru)
            del self.cache[lru.key]
